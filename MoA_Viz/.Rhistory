big_run[hyp,"PL3_Incorrect"]<-run3[hyp,"PL3_Incorrect"]
big_run[hyp,"PL3_Ambiguous"]<-run3[hyp,"PL3_Ambiguous"]
big_run[hyp,"PL3_p.value"]<-run3[hyp,"PL3_p.value"]
big_run[hyp,"PL3_Enrichment.p.value"]<-run3[hyp,"PL3_Enrichment.p.value"]
big_run[hyp,"PL4_Score"]<-run4[hyp,"PL4_Score"]
big_run[hyp,"PL4_Correct"]<-run4[hyp,"PL4_Correct"]
big_run[hyp,"PL4_Incorrect"]<-run4[hyp,"PL4_Incorrect"]
big_run[hyp,"PL4_Ambiguous"]<-run4[hyp,"PL4_Ambiguous"]
big_run[hyp,"PL4_p.value"]<-run4[hyp,"PL4_p.value"]
big_run[hyp,"PL4_Enrichment.p.value"]<-run4[hyp,"PL4_Enrichment.p.value"]
big_run[hyp,"PL5_Score"]<-run5[hyp,"PL5_Score"]
big_run[hyp,"PL5_Correct"]<-run5[hyp,"PL5_Correct"]
big_run[hyp,"PL5_Incorrect"]<-run5[hyp,"PL5_Incorrect"]
big_run[hyp,"PL5_Ambiguous"]<-run5[hyp,"PL5_Ambiguous"]
big_run[hyp,"PL5_p.value"]<-run5[hyp,"PL5_p.value"]
big_run[hyp,"PL5_Enrichment.p.value"]<-run5[hyp,"PL5_Enrichment.p.value"]
k <- 0
if (!is.na(big_run[hyp,"PL1_Score"])){
k <- k + 1
}
if (!is.na(big_run[hyp,"PL2_Score"])){
k <- k + 1
}
if (!is.na(big_run[hyp,"PL3_Score"])){
k <- k + 1
}
if (!is.na(big_run[hyp,"PL4_Score"])){
k <- k + 1
}
if (!is.na(big_run[hyp,"PL5_Score"])){
k <- k + 1
}
big_run[hyp,"Total"] <- k
}
#Write files
top_nodes <- big_run[which(big_run$Total == max(big_run$Total)), ]
biggest_pl <- max(big_run$Total)
if(biggest_pl == 0){
print("NO")
}
list_top_nodes <- rownames(top_nodes)
for(node in list_top_nodes){
if (grepl('+',node,fixed=TRUE) == TRUE){
protein <- unlist(strsplit(node,'+',fixed=TRUE))
sign <- '+1'
} else {
protein <- unlist(strsplit(node,'-',fixed=TRUE))
sign <- '-1'
}
WriteExplainedNodesToSifFile(outputDir=results_dir,protein,sign,ccg,expData,delta=biggest_pl,correctlyExplainedOnly = TRUE)
}
}
# Get Network
netfile = read.csv("../Network_Data/omnipath_full_formatted.csv")
colnames(netfile) = c('source','Interaction','target')
netfile$Interaction = ifelse(netfile$Interaction=="inhibits","Inhibits","Activates")
write.table(netfile,"../Network_Data/omnipath_full_causalr.sif",sep="\t",quote = F,row.names = F,col.names = F)
netall = CreateCCG("../Network_Data/omnipath_full_causalr.sif")
# List Dirs
dirs = list.dirs("../Transcriptomics_Data/cd_tf_progeny",full.names = T,recursive = T)
dirs = dirs[2:19] # get rid of first dir (root dir)
dir=dirs[1]
#for(dir in dirs){
# get both files
files = list.files(dir,full.names = T)
# get cond
cond = strsplit(strsplit(files[1],"/")[[1]][4],"_measurements")[[1]][1]
root_dir = paste0("../Results/CausalRCD/",cond)
dir.create("../Results/CausalRCD")
dir.create(root_dir)
# extract tf
tf_activities = data.frame(read.table(files[grepl("meas_",files)],header=T))
tf_activities[,1] <- ifelse(tf_activities[,1] > 0,1,-1)
tf_file = paste0("../Transcriptomics_Data/cd_tf_progeny/",cond,"_tf_disc.txt")
write.table(tf_activities,file=tf_file,col.names=FALSE,sep="\t",quote=FALSE)
run_causalr(tf_file=tf_file,ccg=netall,results_dir=root_dir)
# get both files
files = list.files(dir,full.names = T)
# get cond
cond = strsplit(strsplit(files[1],"/")[[1]][4],"_measurements")[[1]][1]
dir
# List Dirs
dirs = list.dirs("../Transcriptomics_Data/cd_tf_progeny",full.names = T,recursive = T)
dirs = dirs[2:19] # get rid of first dir (root dir)
# Script to run CARNIVAL
library(CARNIVAL)
library(foreach)
library(doParallel)
assignPROGENyScores <- function (progeny = progeny, progenyMembers = progenyMembers,
id = "gene", access_idx = 1)
{
if (id == "uniprot") {
idx <- which(names(progenyMembers) == "uniprot")
progenyMembers <- progenyMembers[[idx]]
}
else {
idx <- which(names(progenyMembers) == "gene")
progenyMembers <- progenyMembers[[idx]]
}
members <- matrix(data = , nrow = 1, ncol = 2)
pathways <- colnames(progeny)
ctrl <- intersect(x = access_idx, y = 1:nrow(progeny))
if (length(ctrl) == 0) {
stop("The indeces you inserted do not correspond to \n              the number of rows/samples")
}
for (ii in 1:length(pathways)) {
mm <- progenyMembers[[which(names(progenyMembers) ==
pathways[ii])]]
for (jj in 1:length(mm)) {
members <- rbind(members, c(pathways[ii], mm[jj]))
}
}
members <- members[-1, ]
scores <- matrix(data = , nrow = nrow(progeny), ncol = nrow(members))
colnames(scores) <- members[, 2]
rownames(scores) <- rownames(progeny)
members <- unique(members)
for (i in 1:ncol(scores)) {
for (j in 1:nrow(scores)) {
scores[j, i] <- as.numeric(progeny[j, members[which(members[,
2] == colnames(scores)[i]), 1]])
}
}
pxList <- list()
for (ii in 1:length(access_idx)) {
pxList[[length(pxList) + 1]] <- as.data.frame(t(as.matrix(scores[access_idx[ii],
])))
}
names(pxList) <- rownames(progeny)[ctrl]
return(pxList)
}
netfilefull = read.csv("../Network_Data/omnipath_full_formatted.csv")
colnames(netfilefull) = c('source','Interaction','target')
netfilefull$Interaction = ifelse(netfilefull$Interaction=="inhibits",-1,1)
write.table(netfilefull,"../Network_Data/omnipath_full_carnival.sif",sep="\t",quote = F,row.names = F)
netall = "../Network_Data/omnipath_full_carnival.sif"
# List Dirs
dirs = list.dirs("../Transcriptomics_Data/cd_tf_progeny",full.names = T,recursive = T)
dirs = dirs[2:19] # get rid of first dir (root dir)
dir = dirs[1]
dir
# get both files
files = list.files(dir,full.names = T)
# get cond
cond = strsplit(strsplit(files[1],"/")[[1]][4],"_measurements")[[1]][1]
root_dir = paste0("../Results/CARNIVALCD/",cond)
dir.create("../Results/CARNIVALCD")
dir.create(root_dir)
# extract tf and progeny file
load(file=system.file("progenyMembers.RData",package="CARNIVAL"))
measObj = read.table(files[grepl("meas_",files)],header=T)
weightObj = read.table(files[grepl("scores_",files)],header=T)
progenylist = assignPROGENyScores(progeny = weightObj,
progenyMembers = progenyMembers,
id = "gene",
access_idx = 1)
measObj
progenylist
progenylist$`1`
progenylist
progenylist[[1]]
# IMPORT
library(CARNIVAL)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(plyr)
library(data.table)
library(progeny)
library(dorothea)
library(dplyr)
library(viper)
generateTFList <- function (df = df, top = 50, access_idx = 1)
{
if (top == "all") {
top <- nrow(df)
}
if (top > nrow(df)) {
warning("Number of to TF's inserted exceeds the number of actual TF's in the\n            data frame. All the TF's will be considered.")
top <- nrow(df)
}
ctrl <- intersect(x = access_idx, y = 1:ncol(df))
if (length(ctrl) == 0) {
stop("The indeces you inserted do not correspond to \n              the number of columns/samples")
}
returnList <- list()
for (ii in 1:length(ctrl)) {
tfThresh <- sort(x = abs(df[, ctrl[ii]]), decreasing = TRUE)[top]
temp <- which(abs(df[, ctrl[ii]]) >= tfThresh)
currDF <- matrix(data = , nrow = 1, ncol = top)
colnames(currDF) <- rownames(df)[temp[1:top]]
currDF[1, ] <- df[temp[1:top], ctrl[ii]]
currDF <- as.data.frame(currDF)
returnList[[length(returnList) + 1]] <- currDF
}
names(returnList) <- colnames(df)[ctrl]
return(returnList)
}
# Read in file
gex_data = read.csv("../Transcriptomics_Data/CD_data.csv")
# Extract colnames and get rid of 'X'
gex_data_cols = colnames(gex_data)
gex_data_cols = sub('X', '', gex_data_cols)
# Read in probe to gene file and subset
probe_to_gene = read.csv("../../../JanssenProject/LINCS/Modelling/Scripts/U133A.AffymetrixMapping.txt",sep="\t",header = F)
probe_to_gene = subset(probe_to_gene,V1%in%gex_data_cols)
# Rename df with gene names
colnames(gex_data) = gex_data_cols
names(gex_data) <- probe_to_gene$V2[match(names(gex_data), probe_to_gene$V1)]
# Initialise cluster
n = 2 # change to number of cores needed
myCluster <- makeCluster(n, type="FORK",outfile="")
registerDoParallel(myCluster)
# Load files for dorothea
file.copy(from=system.file("dorothea_TF_mapping.csv",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
load(file = "BEST_viperRegulon.rdata")
map<-read.csv("dorothea_TF_mapping.csv")
# Prep matrix
gex_df = gex_data
gex_df = data.frame(t(gex_df))
gex_df = gex_df[-c(1), ]   # notice the -
names(gex_df) = gex_df[979,]
gex_df = gex_df[-c(979), ]   # notice the -
compound_names = names(gex_df) # Column names are compounds/conditions
i = compound_names[1]
i
subset <- data.frame(gex_df[,i])
colnames(subset) = i
rownames(subset) = rownames(gex_df)
fname <- paste0("../Transcriptomics_Data/cd_tf_progeny/",i, ".txt") # get signature .txt
write.table(subset,fname,sep="\t",quote = F)
df = read.table(fname,sep="\t",header=TRUE) # Read back in file
df_genenames <- data.frame('gene'=rownames(df),df) # make df with rownames = gene symbols
#Run progeny
pathway_scores <- try(
progeny(as.matrix(df),scale=F)
)
pathway_scores
#Run Dorothea
data(dorothea_hs, package = "dorothea")
regulons = dorothea_hs %>%
filter(confidence %in% c("A","B","C"))
df_genenames = as.matrix(df_genenames)
tf_activities <- run_viper(as.matrix(df_genenames), regulons,
options=list(minsize=5,
eset.filter=F,
cores=1,
verbose=F,
nes=T))
tfList = generateTFList(tf_activities, top=50, access_idx = 2)
tfList
t(measObj)
stopCluster(myCluster)
p1 <- ggplot( data = one.data );
# --------------------------------------------------------------------------
# If you don't have the scales package installed, uncomment the following line:
# install.packages( "scales" );
library(scales);
# A plotting R script produced by the REVIGO server at http://revigo.irb.hr/
# If you found REVIGO useful in your work, please cite the following reference:
# Supek F et al. "REVIGO summarizes and visualizes long lists of Gene Ontology
# terms" PLoS ONE 2011. doi:10.1371/journal.pone.0021800
# --------------------------------------------------------------------------
# If you don't have the ggplot2 package installed, uncomment the following line:
# install.packages( "ggplot2" );
library(ggplot2)
# --------------------------------------------------------------------------
# If you don't have the scales package installed, uncomment the following line:
# install.packages( "scales" );
library(scales)
# --------------------------------------------------------------------------
# Here is your data from REVIGO. Scroll down for plot configuration options.
revigo.names <- c("term_ID","description","frequency_%","plot_X","plot_Y","plot_size","uniqueness","dispensability");
revigo.data <- rbind(c("GO:0003094","glomerular filtration", 0.004,-4.339, 4.280, 2.682,0.836,0.000),
c("GO:0006184","(obsolete) GTP catabolic process", 0.143,-3.105,-0.158, 4.254,0.984,0.000),
c("GO:0008544","epidermis development", 0.058,-2.436, 5.276, 3.871,0.824,0.000),
c("GO:0016998","cell wall macromolecule catabolic process", 0.059,-2.735, 2.243, 3.880,0.925,0.000),
c("GO:0019885","antigen processing and presentation of endogenous peptide antigen via MHC class I", 0.005,-1.874,-3.235, 2.799,0.870,0.000),
c("GO:0043627","response to estrogen", 0.010,-5.518,-2.312, 3.128,0.860,0.000),
c("GO:0050795","regulation of behavior", 0.021, 1.834,-6.422, 3.421,0.859,0.000),
c("GO:0098602","single organism cell adhesion", 0.161,-4.238,-0.066, 4.316,0.899,0.000),
c("GO:0051289","protein homotetramerization", 0.015, 0.958, 6.852, 3.297,0.908,0.020),
c("GO:0034308","primary alcohol metabolic process", 0.048, 0.275, 3.321, 3.789,0.897,0.058),
c("GO:0006260","DNA replication", 1.577, 0.296,-0.303, 5.306,0.907,0.122),
c("GO:2000674","regulation of type B pancreatic cell apoptotic process", 0.002, 0.679,-6.729, 2.314,0.800,0.135),
c("GO:0042762","regulation of sulfur metabolic process", 0.007, 4.512,-4.672, 2.924,0.828,0.146),
c("GO:1990267","response to transition metal nanoparticle", 0.000,-6.488,-3.236, 0.778,0.850,0.154),
c("GO:0090279","regulation of calcium ion import", 0.018, 2.648,-5.390, 3.372,0.818,0.155),
c("GO:0048872","homeostasis of number of cells", 0.086, 3.043,-6.831, 4.041,0.836,0.162),
c("GO:0050679","positive regulation of epithelial cell proliferation", 0.028, 3.606,-5.033, 3.559,0.780,0.165),
c("GO:0033233","regulation of protein sumoylation", 0.005, 3.757,-5.885, 2.810,0.819,0.194),
c("GO:0006120","mitochondrial electron transport, NADH to ubiquinone", 0.019, 4.850, 3.166, 3.386,0.835,0.198),
c("GO:0043547","positive regulation of GTPase activity", 0.470, 4.227,-5.929, 4.780,0.814,0.203),
c("GO:0002526","acute inflammatory response", 0.016,-6.269,-1.589, 3.318,0.829,0.206),
c("GO:0008610","lipid biosynthetic process", 2.123, 2.355, 1.738, 5.435,0.835,0.207),
c("GO:0042180","cellular ketone metabolic process", 0.423, 3.155, 3.849, 4.735,0.836,0.244),
c("GO:0051707","response to other organism", 0.299,-6.408,-2.555, 4.584,0.759,0.254),
c("GO:0097320","plasma membrane tubulation", 0.006, 1.341, 6.784, 2.918,0.853,0.264),
c("GO:0015939","pantothenate metabolic process", 0.144, 3.857, 3.470, 4.265,0.822,0.267),
c("GO:0034698","response to gonadotropin", 0.003,-5.937,-4.283, 2.588,0.793,0.268),
c("GO:0001578","microtubule bundle formation", 0.027, 2.266, 6.432, 3.533,0.845,0.286),
c("GO:0030198","extracellular matrix organization", 0.060, 2.472, 6.043, 3.886,0.840,0.311),
c("GO:0043062","extracellular structure organization", 0.061, 2.719, 6.067, 3.894,0.840,0.329),
c("GO:0090083","regulation of inclusion body assembly", 0.002, 6.316, 1.349, 2.507,0.813,0.372),
c("GO:0032350","regulation of hormone metabolic process", 0.007, 3.663,-6.725, 2.929,0.823,0.392),
c("GO:0007586","digestion", 0.026,-4.551, 4.382, 3.516,0.787,0.396),
c("GO:0007127","meiosis I", 0.083, 4.137, 5.252, 4.026,0.810,0.418),
c("GO:0032682","negative regulation of chemokine production", 0.003, 1.971,-1.648, 2.582,0.684,0.420),
c("GO:0010510","regulation of acetyl-CoA biosynthetic process from pyruvate", 0.001, 4.837,-1.525, 2.121,0.731,0.421),
c("GO:0034248","regulation of cellular amide metabolic process", 0.700, 4.726,-4.423, 4.954,0.777,0.433),
c("GO:0045598","regulation of fat cell differentiation", 0.023, 4.575,-0.166, 3.465,0.683,0.438),
c("GO:0007599","hemostasis", 0.049, 2.618,-7.019, 3.802,0.835,0.445),
c("GO:0008156","negative regulation of DNA replication", 0.032, 5.405,-3.595, 3.608,0.759,0.445),
c("GO:0003307","regulation of Wnt signaling pathway involved in heart development", 0.001,-2.281,-1.768, 2.185,0.584,0.463),
c("GO:0044724","single-organism carbohydrate catabolic process", 0.782,-1.404, 3.078, 5.001,0.870,0.470),
c("GO:0036092","phosphatidylinositol-3-phosphate biosynthetic process", 0.011, 3.089, 1.417, 3.139,0.826,0.497),
c("GO:1901654","response to ketone", 0.024,-5.453,-3.789, 3.480,0.773,0.497),
c("GO:0000098","sulfur amino acid catabolic process", 0.008, 1.214, 3.537, 3.030,0.850,0.504),
c("GO:0031102","neuron projection regeneration", 0.011,-3.410, 1.814, 3.136,0.582,0.505),
c("GO:0009636","response to toxic substance", 0.833,-5.646,-3.922, 5.029,0.757,0.514),
c("GO:0010800","positive regulation of peptidyl-threonine phosphorylation", 0.005, 5.123,-4.228, 2.820,0.759,0.521),
c("GO:0001816","cytokine production", 0.120,-4.397, 4.398, 4.187,0.769,0.524),
c("GO:0022600","digestive system process", 0.019,-4.492, 4.551, 3.376,0.787,0.531),
c("GO:0006805","xenobiotic metabolic process", 0.051,-6.018,-3.590, 3.820,0.749,0.546),
c("GO:0000083","regulation of transcription involved in G1/S transition of mitotic cell cycle", 0.012, 6.104,-2.655, 3.205,0.782,0.560),
c("GO:0070228","regulation of lymphocyte apoptotic process", 0.010, 2.649,-4.250, 3.123,0.778,0.568),
c("GO:0006959","humoral immune response", 0.035,-4.164,-4.172, 3.650,0.747,0.569),
c("GO:0050918","positive chemotaxis", 0.012,-5.061,-4.770, 3.178,0.744,0.569),
c("GO:0046113","nucleobase catabolic process", 0.051, 3.302, 3.998, 3.812,0.829,0.577),
c("GO:0001501","skeletal system development", 0.107,-3.158, 4.847, 4.139,0.729,0.579),
c("GO:0044283","small molecule biosynthetic process", 5.677, 2.426, 2.873, 5.862,0.845,0.589),
c("GO:0070542","response to fatty acid", 0.010,-5.339,-3.980, 3.094,0.768,0.598),
c("GO:0051205","protein insertion into membrane", 0.111, 3.684, 5.381, 4.155,0.813,0.603),
c("GO:0048598","embryonic morphogenesis", 0.171,-3.117, 4.924, 4.341,0.724,0.620),
c("GO:0032465","regulation of cytokinesis", 0.064, 5.801,-2.142, 3.917,0.770,0.624),
c("GO:0048732","gland development", 0.095,-3.120, 4.657, 4.086,0.723,0.626),
c("GO:0003382","epithelial cell morphogenesis", 0.008, 0.452, 5.627, 3.021,0.727,0.627),
c("GO:0071322","cellular response to carbohydrate stimulus", 0.023,-5.596,-3.816, 3.473,0.743,0.630),
c("GO:0045936","negative regulation of phosphate metabolic process", 0.182, 5.269,-3.853, 4.368,0.726,0.633),
c("GO:0031334","positive regulation of protein complex assembly", 0.123, 5.853,-0.491, 4.198,0.728,0.635),
c("GO:1901699","cellular response to nitrogen compound", 0.121,-5.915,-3.674, 4.192,0.745,0.637),
c("GO:0000076","DNA replication checkpoint", 0.015, 6.319,-2.363, 3.292,0.755,0.642),
c("GO:0071385","cellular response to glucocorticoid stimulus", 0.007,-5.469,-4.278, 2.935,0.746,0.645),
c("GO:0070201","regulation of establishment of protein localization", 0.165, 4.981,-5.223, 4.327,0.792,0.652),
c("GO:0032069","regulation of nuclease activity", 0.011, 4.671,-5.996, 3.158,0.809,0.653),
c("GO:0006721","terpenoid metabolic process", 0.260, 3.868, 2.368, 4.524,0.820,0.659),
c("GO:0097193","intrinsic apoptotic signaling pathway", 0.057,-1.065,-4.623, 3.864,0.657,0.659),
c("GO:0009267","cellular response to starvation", 0.094,-6.313,-2.199, 4.080,0.744,0.662),
c("GO:0097305","response to alcohol", 0.055,-5.861,-4.015, 3.850,0.763,0.664),
c("GO:0002685","regulation of leukocyte migration", 0.030, 1.614,-4.418, 3.590,0.654,0.674),
c("GO:0071345","cellular response to cytokine stimulus", 0.122,-5.575,-3.575, 4.194,0.724,0.678),
c("GO:0042448","progesterone metabolic process", 0.002, 4.223,-1.233, 2.452,0.762,0.688),
c("GO:0051147","regulation of muscle cell differentiation", 0.033, 4.170,-0.285, 3.630,0.673,0.689),
c("GO:0055022","negative regulation of cardiac muscle tissue growth", 0.002, 3.766,-0.008, 2.369,0.645,0.692),
c("GO:0045833","negative regulation of lipid metabolic process", 0.023, 5.472,-2.924, 3.464,0.725,0.699));
one.data <- data.frame(revigo.data);
names(one.data) <- revigo.names;
one.data <- one.data [(one.data$plot_X != "null" & one.data$plot_Y != "null"), ];
one.data$plot_X <- as.numeric( as.character(one.data$plot_X) );
one.data$plot_Y <- as.numeric( as.character(one.data$plot_Y) );
one.data$plot_size <- as.numeric( as.character(one.data$plot_size) );
one.data$log10_p_value <- as.numeric( as.character(one.data$log10_p_value) );
one.data$frequency <- as.numeric( as.character(one.data$frequency) );
one.data$uniqueness <- as.numeric( as.character(one.data$uniqueness) );
one.data$dispensability <- as.numeric( as.character(one.data$dispensability) );
#head(one.data);
# --------------------------------------------------------------------------
# Names of the axes, sizes of the numbers and letters, names of the columns,
# etc. can be changed below
p1 <- ggplot( data = one.data );
p1 <- p1 + geom_point( aes( plot_X, plot_Y, colour = log10_p_value, size = plot_size), alpha = I(0.6) ) + scale_size_area();
p1 <- p1 + scale_colour_gradientn( colours = c("blue", "green", "yellow", "red"), limits = c( min(one.data$log10_p_value), 0) );
p1 <- p1 + geom_point( aes(plot_X, plot_Y, size = plot_size), shape = 21, fill = "transparent", colour = I (alpha ("black", 0.6) )) + scale_size_area();
p1 <- p1 + scale_size( range=c(5, 30)) + theme_bw(); # + scale_fill_gradientn(colours = heat_hcl(7), limits = c(-300, 0) );
ex <- one.data [ one.data$dispensability < 0.15, ];
p1 <- p1 + geom_text( data = ex, aes(plot_X, plot_Y, label = description), colour = I(alpha("black", 0.85)), size = 3 );
p1 <- p1 + labs (y = "semantic space x", x = "semantic space y");
p1 <- p1 + theme(legend.key = element_blank()) ;
one.x_range = max(one.data$plot_X) - min(one.data$plot_X);
one.y_range = max(one.data$plot_Y) - min(one.data$plot_Y);
p1 <- p1 + xlim(min(one.data$plot_X)-one.x_range/10,max(one.data$plot_X)+one.x_range/10);
p1 <- p1 + ylim(min(one.data$plot_Y)-one.y_range/10,max(one.data$plot_Y)+one.y_range/10);
# --------------------------------------------------------------------------
# Output the plot to screen
p1;
# Uncomment the line below to also save the plot to a file.
# The file type depends on the extension (default=pdf).
# ggsave("C:/Users/path_to_your_file/revigo-plot.pdf");
View(p1)
p1
p1 <- ggplot( data = one.data );
p1 <- p1 + geom_point( aes( plot_X, plot_Y, size = plot_size), alpha = I(0.6) ) + scale_size_area();
p1 <- p1 + scale_colour_gradientn( colours = c("blue", "green", "yellow", "red"), limits = c( min(one.data$log10_p_value), 0) );
p1 <- p1 + geom_point( aes(plot_X, plot_Y, size = plot_size), shape = 21, fill = "transparent", colour = I (alpha ("black", 0.6) )) + scale_size_area();
p1 <- p1 + scale_size( range=c(5, 30)) + theme_bw(); # + scale_fill_gradientn(colours = heat_hcl(7), limits = c(-300, 0) );
ex <- one.data [ one.data$dispensability < 0.15, ];
p1 <- p1 + geom_text( data = ex, aes(plot_X, plot_Y, label = description), colour = I(alpha("black", 0.85)), size = 3 );
p1 <- p1 + labs (y = "semantic space x", x = "semantic space y");
p1 <- p1 + theme(legend.key = element_blank()) ;
one.x_range = max(one.data$plot_X) - min(one.data$plot_X);
one.y_range = max(one.data$plot_Y) - min(one.data$plot_Y);
p1 <- p1 + xlim(min(one.data$plot_X)-one.x_range/10,max(one.data$plot_X)+one.x_range/10);
p1 <- p1 + ylim(min(one.data$plot_Y)-one.y_range/10,max(one.data$plot_Y)+one.y_range/10);
p1
p1 <- ggplot( data = one.data );
p1
p1 <- p1 + geom_point( aes( plot_X, plot_Y, size = plot_size), alpha = I(0.6) ) + scale_size_area();
p1
setwd("~/OneDrive - University Of Cambridge/MoA_Tool/MoA_Viz")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('gadget.R')
source('gadget_script.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rstudioapi::jobRunScript(path="./gadget_script.R")
runApp()
runApp()
runApp()
server <- function(input, output) {
observeEvent(input$launch_app, {
rstudioapi::jobRunScript(path = "./gadget_script.R")
})
}
library(rhandsontable)
source('~/OneDrive - University Of Cambridge/MoA_Tool/MoA_Viz/app_test.R')
runApp('app_test.R')
runApp()
runApp()
runApp()
runApp()
install.packages("shinyhelper")
runApp()
runApp()
runApp()
runApp()
?helper
runApp()
runApp()
runApp()
install.packages("shinyBS")
library(shinyBS)
runApp()
runApp()
runApp()
runApp()
runApp('~/popovertest')
install.packages("shinydashboard")
runApp('~/popovertest')
runApp()
runApp()
?fileInput
runApp()
runApp()
runApp()
?bsButton
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
DTOutput()
?DTOutuput
?DTOutput
?renderDT
runApp()
runApp()
remotes::install_github("colinfay/darkmode")
runApp()
runApp()
install.packages("shinythemes")
library(shinythemes)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?actionButton
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()

print(i)
fname <- paste0("/",i, ".txt") # get signature .txt
fname <- paste0(i, ".txt") # get signature .txt
df = read.table(fname,sep="\t",header=TRUE,row.names=1) # Read back in file
df_genenames <- data.frame('gene'=rownames(df),df)
df_genenames
#Run progeny
pathway_scores <- try(
runPROGENy(df_genenames,weight_matrix,z_scores=F),
silent = T)
pathway_scores
#Generate input files
folder = paste0(i,"_measurements/scores_")
scores <- rbind(rownames(pathway_scores),pathway_scores[,1])
scores
write.table(scores,paste0(folder,i,".txt"),col.names=F,row.names=F,quote=F,sep='\t') # save
# Script to prepare PROGENy pathway scores
# Input: Matrix of gene expression data (Rows are genes (Entrez), columns are compounds), and
#        The .txt file for each signature (From prepare_input_parellel.R)
#         And a measurement folder for each compound (From prepare_input_parellel.R)
# Output: PROGEny pathway weights .txt in each compound's measurement folder
# Import packages
library(CARNIVAL)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(plyr)
library(data.table)
# set n to number of cores
myCluster <- makeCluster(n, type="FORK",outfile="")
registerDoParallel(myCluster)
# Load files for progeny
file.copy(from=system.file("model_NatComm+14_human.csv",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
weight_matrix<-read.csv("model_NatComm+14_human.csv")
# Import matrix
gexfile = "HT29_6h_10uM.csv"
gex_df = fread(gexfile,header=TRUE,sep=",") # First row is python header
gex_df = as.data.frame(gex_df) # As df
compound_names = names(gex_df) # Column names are compounds
compound_names = compound_names[!compound_names %in% 'Compound_id'] # Get rid of 'Compound_id'
# test for e.g. 10 compounds
compound_names = compound_names[1:10]
output <-
foreach(i = compound_names) %dopar% {  # loop over each compound
print(i)
fname <- paste0(i, ".txt") # get signature .txt
df = read.table(fname,sep="\t",header=TRUE,row.names=1) # Read back in file
df_genenames <- data.frame('gene'=rownames(df),df) # make df with rownames = gene symbols
#Run progeny
pathway_scores <- try(
runPROGENy(df_genenames,weight_matrix,z_scores=F),
silent = T)
if(inherits(pathway_scores,"try-error")){ # if it fails then skip
next
}
#Generate input files
folder = paste0(i,"_measurements/scores_") # get folder name
scores <- rbind(rownames(pathway_scores),pathway_scores[,1]) # put into correct format
write.table(scores,paste0(folder,i,".txt"),col.names=F,row.names=F,quote=F,sep='\t') # save
}
stopCluster(myCluster)
# Script to prepare PROGENy pathway scores
# Input: Matrix of gene expression data (Rows are genes (Entrez), columns are compounds), and
#        The .txt file for each signature (From prepare_input_parellel.R)
#         And a measurement folder for each compound (From prepare_input_parellel.R)
# Output: PROGEny pathway weights .txt in each compound's measurement folder
# Import packages
library(CARNIVAL)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(plyr)
library(data.table)
# set n to number of cores
myCluster <- makeCluster(n, type="FORK",outfile="")
registerDoParallel(myCluster)
# Load files for progeny
file.copy(from=system.file("model_NatComm+14_human.csv",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
weight_matrix<-read.csv("model_NatComm+14_human.csv")
# Import matrix
gexfile = "HT29_6h_10uM.csv"
gex_df = fread(gexfile,header=TRUE,sep=",") # First row is python header
gex_df = as.data.frame(gex_df) # As df
compound_names = names(gex_df) # Column names are compounds
compound_names = compound_names[!compound_names %in% 'Compound_id'] # Get rid of 'Compound_id'
# test for e.g. 10 compounds
compound_names = compound_names[1:10]
output <-
foreach(i = compound_names) %dopar% {  # loop over each compound
print(i)
fname <- paste0(i, ".txt") # get signature .txt
df = read.table(fname,sep="\t",header=TRUE,row.names=1) # Read back in file
df_genenames <- data.frame('gene'=rownames(df),df) # make df with rownames = gene symbols
#Run progeny
pathway_scores <- try(
runPROGENy(df_genenames,weight_matrix,z_scores=F),
silent = T)
if(inherits(pathway_scores,"try-error")){ # if it fails then skip
next
}
#Generate input files
folder = paste0(i,"_measurements/scores_") # get folder name
scores <- rbind(rownames(pathway_scores),pathway_scores[,1]) # put into correct format
write.table(scores,paste0(folder,i,".txt"),col.names=F,row.names=F,quote=F,sep='\t') # save
}
stopCluster(myCluster)
# Script to prepare PROGENy pathway scores
# Input: Matrix of gene expression data (Rows are genes (Entrez), columns are compounds), and
#        The .txt file for each signature (From prepare_input_parellel.R)
#         And a measurement folder for each compound (From prepare_input_parellel.R)
# Output: PROGEny pathway weights .txt in each compound's measurement folder
# Import packages
library(CARNIVAL)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(plyr)
library(data.table)
# set n to number of cores
n = 2
myCluster <- makeCluster(n, type="FORK",outfile="")
registerDoParallel(myCluster)
# Load files for progeny
file.copy(from=system.file("model_NatComm+14_human.csv",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
weight_matrix<-read.csv("model_NatComm+14_human.csv")
# Import matrix
gexfile = "HT29_6h_10uM.csv"
gex_df = fread(gexfile,header=TRUE,sep=",") # First row is python header
gex_df = as.data.frame(gex_df) # As df
compound_names = names(gex_df) # Column names are compounds
compound_names = compound_names[!compound_names %in% 'Compound_id'] # Get rid of 'Compound_id'
# test for e.g. 10 compounds
compound_names = compound_names[1:10]
output <-
foreach(i = compound_names) %dopar% {  # loop over each compound
print(i)
fname <- paste0(i, ".txt") # get signature .txt
df = read.table(fname,sep="\t",header=TRUE,row.names=1) # Read back in file
df_genenames <- data.frame('gene'=rownames(df),df) # make df with rownames = gene symbols
#Run progeny
pathway_scores <- try(
runPROGENy(df_genenames,weight_matrix,z_scores=F),
silent = T)
if(inherits(pathway_scores,"try-error")){ # if it fails then skip
next
}
#Generate input files
folder = paste0(i,"_measurements/scores_") # get folder name
scores <- rbind(rownames(pathway_scores),pathway_scores[,1]) # put into correct format
write.table(scores,paste0(folder,i,".txt"),col.names=F,row.names=F,quote=F,sep='\t') # save
}
stopCluster(myCluster)
# Create output dir
dir.create(file.path("RESULTS_CARNIVAL"),showWarnings = FALSE)
compound_folders = list.dirs(recursive=FALSE)
compound_dirs
compound_folders
# get ones that have already finished and exclude (checkpointing)
done_folders = list.dirs(path="RESULTS_CARNIVAL",full.names=FALSE,recursive=FALSE)
info = file.info(list.dirs(path="RESULTS_CARNIVAL",recursive=FALSE))
info = info[with(info, order(as.POSIXct(ctime))),]
donecomps = rownames(info)
exclude = tail(donecomps,n=1)
exclude = unlist(strsplit(exclude,"RESULTS_CARNIVAL/"))[2]
done_final = done_folders[!done_folders %in% exclude]
compound_folders
compound = compound_folders[1]
compound
drug = unlist(strsplit(unlist(strsplit(compound,"/"))[2],"_"))[1] # get the compound name
drug
#dir.create(file.path(paste0("RESULTS_CARNIVAL/",drug)),showWarnings = FALSE)
results_dir = paste0("RESULTS_CARNIVAL/",drug)
results_dir
#results_dir = "RESULTS_CARNIVAL/"
tf_activities = list.files(path=compound,pattern="_50.txt",full.names=TRUE)
progeny_pathways = list.files(path=compound,pattern="scores_",full.names=TRUE)
tf_activities
dir.create(file.path(paste0("RESULTS_CARNIVAL/",drug)),showWarnings = FALSE)
# load tf + progeny
tf_activities = list.files(path=compound,pattern="_50.txt",full.names=TRUE)
progeny_pathways = list.files(path=compound,pattern="scores_",full.names=TRUE)
progeny_pathways
R.version.string
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install(c("limma", "edgeR", "Glimma", "org.Mm.eg.db", "gplots", "RColorBrewer", "NMF", "BiasedUrn"))
library(edgeR)
library(limma)
library(Glimma)
library(org.Hs.eg.db)
library(gplots)
library(RColorBrewer)
library(NMF)
setwd("~/OneDrive - University Of Cambridge/MoA_Tool/MoA_Viz/Example_Data/Get_Example_Data")
# Open counts file
seqdata <- read.delim("GSE140490_PDAC_cell_line_cuffnorm_all_fpkm_exprs.txt",stringsAsFactors=F)
head(seqdata)
# Open counts file
countdata <- read.delim("GSE140490_PDAC_cell_line_cuffnorm_all_fpkm_exprs.txt",stringsAsFactors=F)
head(countdata)
# Convert counts to DGEList object
DGEListObject <- DGEList(countdata)
View(countdata)
View(countdata)
View(DGEListObject)
DGEListObject$samples
# Filter lowly expressed genes
thresh <- countdata > 0.5
head(thresh)
keep <- rowSums(thresh) >= 3 # keep if TRUE in at least 3 samples
summary(keep)
# QC
barplot(DGEListObject$samples$lib.size,names=colnames(DGEListObject),las=2)
title("Barplot of library sizes")
colnames(DGEListObject)
strsplit(colnames(DGEListObject),"PATU8902_")[1]
strsplit(colnames(DGEListObject),"PATU8902_")
sapply(colnames(DGEListObject),function(x) strsplit (x,"PATU8988T_"[[1]], USE.NAMES=F))
sapply(colnames(DGEListObject),function(x) strsplit (x,"PATU8988T_"[[1]]))
unname(sapply(colnames(DGEListObject),function(x) strsplit (x,"_"[[1]])))
unname(sapply(colnames(DGEListObject),function(x) strsplit (x,"PATU8902"[[1]])))
unname(sapply(colnames(DGEListObject),function(x) strsplit (x,"PATU8902)"[[1]][1])))
unname(sapply(colnames(DGEListObject),function(x) strsplit (x,"PATU8902)"[[1]][2])))
unname(sapply(colnames(DGEListObject),function(x) strsplit (x,"PATU8902_"[[1]][2])))
unname(sapply(colnames(DGEListObject),function(x) strsplit (x,"PATU8902_"[[1]])))
unname(unlist(sapply(colnames(DGEListObject),function(x) strsplit (x,"PATU8902_"[[1]]))))
unname(sapply(colnames(DGEListObject),function(x) strsplit (x,"PATU8902_"[[1]])))
unname(sapply(colnames(DGEListObject),function(x) strsplit (x,"PATU8902_"[[1]][2])))
unname(sapply(colnames(DGEListObject),function(x) strsplit (x,"PATU8902_"[[1]][1])))
unname(sapply(colnames(DGEListObject),function(x) strsplit (x,"PATU8902_")))
unname(sapply(colnames(DGEListObject),function(x) strsplit (x,"PATU8902_"[2])))
unname(sapply(colnames(DGEListObject),function(x) strsplit (x,"PATU8902_"[1])))
library(purrr)
map(strsplit(colnames(DGEListObject),"PATU8988T_"),~x[2]) %>% unlist()
# QC
ss <- strsplit(colnames(DGEListObject),"_")
ss
unmerged <- unlist(ss)[2*(1:length(colnames(DGEListObject)))-1]
unmerged
ss
lapply(ss, function(x) x[-1])
unmerged <- lapply(ss, function(x) x[-1])
unmerged
test = unmerged[1]
test
paste(unlist(test),collapse="_")
merged <- lapply(unmerged, function(x) paste(unlist(x),collapse="_"))
merged
barplot(DGEListObject$samples$lib.size,names=merged,las=2)
title("Barplot of library sizes")
?barplot
DGEListObject$samples$lib.size
View(DGEListObject$samples)
ggplot(data=DGEListObject$samples,
aes(x=rownames(DGEListObject$samples),y=lib.size))+
geom_bar(stat="identity")
library(ggplot2)
ggplot(data=DGEListObject$samples,
aes(x=rownames(DGEListObject$samples),y=lib.size))+
geom_bar(stat="identity")
ggplot(data=DGEListObject$samples,
aes(x=rownames(DGEListObject$samples),y=lib.size))+
geom_bar(stat="identity")+
geom_text(aes(label=merged))
ggplot(data=DGEListObject$samples,
aes(x=rownames(DGEListObject$samples),y=lib.size))+
geom_bar(stat="identity")+
scale_x_discrete(labels=merged)
ggplot(data=DGEListObject$samples,
aes(x=rownames(DGEListObject$samples),y=lib.size))+
geom_bar(stat="identity")+
scale_x_discrete(labels=merged,angle=45)
ggplot(data=DGEListObject$samples,
aes(x=rownames(DGEListObject$samples),y=lib.size))+
geom_bar(stat="identity")+
scale_x_discrete(labels=merged)+
theme(axis.text.x=element_text(angle=45))
ggplot(data=DGEListObject$samples,
aes(x=rownames(DGEListObject$samples),y=lib.size))+
geom_bar(stat="identity")+
scale_x_discrete(labels=merged)+
theme(axis.text.x=element_text(angle=45,hjust=1))
ggplot(data=DGEListObject$samples,
aes(x=rownames(DGEListObject$samples),y=lib.size))+
geom_bar(stat="identity")+
scale_x_discrete(labels=merged)+
theme(axis.text.x=element_text(angle=45,hjust=1))+
ggtitle("Barplot of library sizes")+
labs(x="Sample",y="Library Size")
# Boxplots to check normality
logcounts <- log2(countdata)
boxplot(logcounts,xlab="",ylab="Log2 FPKM",las=2)
# Boxplots to check normality
logcounts <- log2(countdata)
boxplot(logcounts,xlab="",ylab="Log2 FPKM",las=2)
abline(h=median(logcounts),col="blue")
title("Boxplots of logFPKMs (unnormalised)")
logcounts
# MDS plots
plotMDS(countdata)
# Hierarchical clustering
var_genes <- apply(logcounts,1,var)
# Hierarchical clustering
var_genes <- apply(logcounts,1,var)
# Hierarchical clustering
var_genes <- apply(logcounts,1,var)
head(var_genes)
select_var <- names(sort(var_genes,decreasing=T))[1:500]
head(select_var)
highly_variable_lfpkm <- logcounts[select_var,]
dim(highly_variable_lfpkm)
head(highly_variable_lfpkm)
## Get some nicer colours
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
# Plot the heatmap
heatmap.2(highly_variable_lcpm,col=rev(morecols(50)),trace="none", main="Top 500 most variable genes across samples",scale="row")
# Plot the heatmap
heatmap.2(highly_variable_lfpkm,col=rev(morecols(50)),trace="none", main="Top 500 most variable genes across samples",scale="row")
highly_variable_lfpkm
as.matrix(highly_variable_lfpkm)
# Plot the heatmap
heatmap.2(as.matrix(highly_variable_lfpkm),col=rev(morecols(50)),trace="none", main="Top 500 most variable genes across samples",scale="row")
?heatmap2
?heatmap.2
View(highly_variable_lfpkm)
# Plot the heatmap
colnames(highly_variable_lfpkm) = merged
heatmap.2(as.matrix(highly_variable_lfpkm),col=rev(morecols(50)),trace="none", main="Top 500 most variable genes across samples",scale="row")
DGEListObject <- DGEListObject[keep, keep.lib.sizes=FALSE]
# QC
# The next three lines are to make the x-labels easier to read
ss <- strsplit(colnames(DGEListObject),"_")
unmerged <- lapply(ss, function(x) x[-1])
merged <- lapply(unmerged, function(x) paste(unlist(x),collapse="_"))
# Barplot of library sizes
ggplot(data=DGEListObject$samples,
aes(x=rownames(DGEListObject$samples),y=lib.size))+
geom_bar(stat="identity")+
scale_x_discrete(labels=merged)+
theme(axis.text.x=element_text(angle=45,hjust=1))+
ggtitle("Barplot of library sizes")+
labs(x="Sample",y="Library Size")
# Boxplots to check normality
logcounts <- log2(countdata)
boxplot(logcounts,xlab="",ylab="Log2 FPKM",las=2)
title("Boxplots of logFPKMs (unnormalised)")
# Hierarchical clustering w/ top 100 most variable genes
var_genes <- apply(logcounts,1,var)
head(var_genes)
select_var <- names(sort(var_genes,decreasing=T))[1:500]
head(select_var)
highly_variable_lfpkm <- logcounts[select_var,]
dim(highly_variable_lfpkm)
head(highly_variable_lfpkm)
## Get some nicer colours
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
# Plot the heatmap
colnames(highly_variable_lfpkm) = merged
heatmap.2(as.matrix(highly_variable_lfpkm),col=rev(morecols(50)),trace="none", main="Top 500 most variable genes across samples",scale="row")
# Normalisation
y <- calcNormFactors(y)
# Normalisation
DGEListObject <- calcNormFactors(DGEListObject)
DGEListObject$samples
# limma-voom differential expression
group <- DGEListObject$samples$group
group
View(DGEListObject)
View(DGEListObject)
a <- rownames(DGEListObject$samples)
a
# limma-voom differential expression
sample_names = rownames(DGEListObject$samples)
strsplit(sample_names,"_")
ss <- strsplit(sample_names,"_")
ss
unmerged <- lapply(ss, function(x) x[-length(x)])
unmerged
merged <- lapply(unmerged, function(x) paste(unlist(x),collapse="_"))
merged
DGEListObject$samples$group <- merged
groups = merged
View(DGEListObject$samples)
group = merged
design <- model.matrix(~ 0 + group)
design
group
group = unlist(merged)
group
design <- model.matrix(~ 0 + group)
design
colnames(design) <- levels(group)
design
levels(group) = unique(group)
design <- model.matrix(~ 0 + group)
colnames(design) <- levels(group)
design
# Voom-transform
par(mfrow=c(1,1))
v <- vroom(countdata,design,plot=T)
v <- voom(countdata,design,plot=T)
head(v)
v
View(v)
boxplot(v$E,xlab="",yab="Log2 FPKM",las=2,main="Voom transformed logFPKM")
boxplot(logcounts)
v
?voom
design
# Contrast matrix
contr.matrix <- makeConstrasts(
PAU89988T_6h = PATU8988T_DMSO - PATU8988T_DCLK1IN1_6h,
PAU89988T_24h = PATU8988T_DMSO - PATU8988T_DCLK1IN1_24h,
PATU8902_6h = PATU8902_DMSO - PATU8902_DCLK1IN1_6h,
PATU8902_24h = PATU8902_DMSO - PATU8902_DCLK1IN1_24h,
levels = colnames(design)
)
# Contrast matrix
contr.matrix <- makeContrasts(
PAU89988T_6h = PATU8988T_DMSO - PATU8988T_DCLK1IN1_6h,
PAU89988T_24h = PATU8988T_DMSO - PATU8988T_DCLK1IN1_24h,
PATU8902_6h = PATU8902_DMSO - PATU8902_DCLK1IN1_6h,
PATU8902_24h = PATU8902_DMSO - PATU8902_DCLK1IN1_24h,
levels = colnames(design)
)
contr.matrix
library(DESeq2)
?DESeq
View(countdata)
View(countdata)
DGEListObject$samples
dds <- DESeqDataSetFromMatrix(countData=countdata,
colData = DGEListObject$samples,
design=design,tidy=T)
?voom
v = voom(DGEListObject,design,plot=T,normalize_method="none")
v = voom(DGEListObject,design,plot=T,normalize.method="none")
fit <- lmFit(v,design)
fit <- eBayes(fit)
View(fit)
topTable(fit,n=Inf,sort="non",p.value=0.05)
View(topTable(fit,n=Inf))
?lmFit
?eBayes
fit <- lmFit(v,design)
fit2 <- contrasts.fit(fit,contr.matrix)
fit2 <- eBayes(fit2,trend=F)
results <- decideTests(fit2,p.value=.05,lfc=log2(2))
topGenes = topTable(fit2,number=Inf,sort.by=M)
topGenes = topTable(fit2,number=Inf)
View(topGenes)
View(topTable(fit2,coef="PATU8902_DMSO - PATU8902_DCLK1IN1_24h"))
write.csv(topGenes,file="all_conds.csv")
write.csv(topGenes,file="all_conds.csv")
experiments = colnames(topGenes)[1:4]
experiments
for(i in c(1,2,3,4)){
print(i)
}
sub = topGenes[,c(i)]
sub
sub = data.frame(topGenes[,c(i)])
sub
experiments = colnames(topGenes)[1:4]
for(i in c(1,2,3,4)){
sub = data.frame(topGenes[,c(i)])
rownames(sub) = rownames(topGenes)
fname = paste0(experiments[i],"_logfc.csv")
write.csv(sub,fname)
}
write.table(sub,fname,quote=F,sep="\t")
experiments = colnames(topGenes)[1:4]
for(i in c(1,2,3,4)){
sub = data.frame(topGenes[,c(i)])
rownames(sub) = rownames(topGenes)
fname = paste0(experiments[i],"_logfc.txt")
write.table(sub,fname,quote=F,sep="\t")
}
View(sub)
experiments = colnames(topGenes)[1:4]
for(i in c(1,2,3,4)){
sub = data.frame(topGenes[,c(i)])
sub$Genes = rownames(topGenes)
colnames(sub) = c("Genes",experiments[i])
fname = paste0(experiments[i],"_logfc.txt")
write.table(sub,fname,quote=F,sep="\t",row.names=F,col.names = T)
}
experiments = colnames(topGenes)[1:4]
for(i in c(1,2,3,4)){
sub = data.frame(topGenes[,c(i)])
sub$Genes = rownames(topGenes)
colnames(sub) = c("Genes",experiments[i])
sub = sub[,c(2,1)]
fname = paste0(experiments[i],"_logfc.txt")
write.table(sub,fname,quote=F,sep="\t",row.names=F,col.names = T)
}
View(sub)
sub = data.frame(topGenes[,c(i)])
sub
sub$Genes = rownames(topGenes)
sub
experiments = colnames(topGenes)[1:4]
for(i in c(1,2,3,4)){
sub = data.frame(topGenes[,c(i)])
sub$Genes = rownames(topGenes)
colnames(sub) = c(experiments[i],"Genes")
sub = sub[,c(2,1)]
fname = paste0(experiments[i],"_logfc.txt")
write.table(sub,fname,quote=F,sep="\t",row.names=F,col.names = T)
}

file.create(paste0(i,"_ERROR.csv"))
}
}
output <-
foreach(i = compound_names) %dopar% {
print(i)
fname = paste0(i,".txt")
compound_sig = cbind(test_df[1],test_df[i])
write.table(compound_sig,fname,sep="\t",quote=F,row.names=F,col.names=T,append=T)
df = read.table(fname,sep="\t",header=T,row.names=1)
TF_genesymbol<-runDoRothEA(df, regulon=viper_regulon, confidence_level=c('A','B','C'))
TF_uniprot<-GeneSymbol2Uniprot(TF_genesymbol, map, 1, 2)
folder = paste0(i,"_measurements/")
generate_measfile(measurements=TF_uniprot, topnumber=50, write2folder=folder)
}
stopCluster(myCluster)
myCluster <- makeCluster(2, type="FORK",outfile="")
registerDoParallel(myCluster)
output <-
foreach(i = compound_names) %dopar% {
print(i)
fname = paste0(i,".txt")
compound_sig = cbind(test_df[1],test_df[i])
write.table(compound_sig,fname,sep="\t",quote=F,row.names=F,col.names=T,append=T)
df = read.table(fname,sep="\t",header=T,row.names=1)
TF_genesymbol<-runDoRothEA(df, regulon=viper_regulon, confidence_level=c('A','B','C'))
TF_uniprot<-GeneSymbol2Uniprot(TF_genesymbol, map, 1, 2)
folder = paste0(i,"_measurements/")
generate_measfile(measurements=TF_uniprot, topnumber=50, write2folder=folder)
}
stopCluster(myCluster)
# Script to prepare DoRoTHea TF activities
# Input: Matrix of gene expression data (Rows are genes (Entrez), columns are compounds)
# Output: 1. .txt file for each signature found in the input matrix
#         2. Folder for each compound (compoundname_measurements)
#         with TF activities (meas_50.txt) as UniProt ID
# Import packages
library(CARNIVAL)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(plyr)
library(data.table)
# Initialise cluster
n = 2 # change to number of cores needed
myCluster <- makeCluster(n, type="FORK",outfile="")
registerDoParallel(myCluster)
# Load files for dorothea
file.copy(from=system.file("dorothea_TF_mapping.csv",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
load(file = system.file("BEST_viperRegulon.rdata",package="CARNIVAL"))
map<-read.csv("dorothea_TF_mapping.csv")
#Open matrix
gexfile = "HT29_6h_10uM.csv"
gex_df = fread(gexfile,header=TRUE,sep=",") # First row is python header
gex_df = as.data.frame(gex_df) # Change into df
compound_names = names(gex_df) # Column names are compounds
compound_names = compound_names[!compound_names %in% 'Compound_id'] # Get rid of 'Compound_id'
#Now change gene ids to gene symbols using metadata
gene_info = fread('gene_info.csv',header=TRUE) # Import metadata
gene_info = as.data.frame(gene_info) # Read as df
converted = merge(test_df,gene_info,by.x='Compound_id',by.y='pr_gene_id') # Map to gene symbol
converted_symbols = converted$pr_gene_symbol # Extract symbols
test_df$Compound_id = converted_symbols # Make row names into symbols
compound_names = compound_names[0:10] # test e.g. 10 compounds
# Run
output <-
foreach(i = compound_names) %dopar% { # Loop over every compound
print(i)
fname = paste0(i,".txt") # Set the file name for the signature file
compound_sig = cbind(test_df[1],test_df[i]) # Take the gene names and corresponding measurements
write.table(compound_sig,fname,sep="\t",quote=F,row.names=F,col.names=T,append=T) # Write
df = read.table(fname,sep="\t",header=T,row.names=1) # Read in the signature .txt file
TF_genesymbol<-try( # run DoRothEA, confidence levels A, B and C
runDoRothEA(df, regulon=viper_regulon, confidence_level=c('A','B','C')),
silent = T
)
if(inherits(TF_genesymbol,"try-error")){ # If there is an error for some reason, skip the compound
next
}
TF_uniprot<-GeneSymbol2Uniprot(TF_genesymbol, map, 1, 2) # Map to UniProt
folder = paste0(i,"_measurements/") # Set folder name
generate_measfile(measurements=TF_uniprot, topnumber=50, write2folder=folder) # Write TF activities to folder
}
# Stop the cluster
stopCluster(myCluster)
# Script to prepare DoRoTHea TF activities
# Input: Matrix of gene expression data (Rows are genes (Entrez), columns are compounds)
# Output: 1. .txt file for each signature found in the input matrix
#         2. Folder for each compound (compoundname_measurements)
#         with TF activities (meas_50.txt) as UniProt ID
# Import packages
library(CARNIVAL)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(plyr)
library(data.table)
# Initialise cluster
n = 2 # change to number of cores needed
myCluster <- makeCluster(n, type="FORK",outfile="")
registerDoParallel(myCluster)
# Load files for dorothea
file.copy(from=system.file("dorothea_TF_mapping.csv",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
load(file = system.file("BEST_viperRegulon.rdata",package="CARNIVAL"))
map<-read.csv("dorothea_TF_mapping.csv")
#Open matrix
gexfile = "HT29_6h_10uM.csv"
gex_df = fread(gexfile,header=TRUE,sep=",") # First row is python header
gex_df = as.data.frame(gex_df) # Change into df
compound_names = names(gex_df) # Column names are compounds
compound_names = compound_names[!compound_names %in% 'Compound_id'] # Get rid of 'Compound_id'
#Now change gene ids to gene symbols using metadata
gene_info = fread('gene_info.csv',header=TRUE) # Import metadata
gene_info = as.data.frame(gene_info) # Read as df
converted = merge(test_df,gene_info,by.x='Compound_id',by.y='pr_gene_id') # Map to gene symbol
converted_symbols = converted$pr_gene_symbol # Extract symbols
test_df$Compound_id = converted_symbols # Make row names into symbols
compound_names = compound_names[0:10] # test e.g. 10 compounds
# Run
output <-
foreach(i = compound_names) %dopar% { # Loop over every compound
print(i)
fname = paste0(i,".txt") # Set the file name for the signature file
compound_sig = cbind(test_df[1],test_df[i]) # Take the gene names and corresponding measurements
write.table(compound_sig,fname,sep="\t",quote=F,row.names=F,col.names=T,append=T) # Write
df = read.table(fname,sep="\t",header=T,row.names=1) # Read in the signature .txt file
TF_genesymbol<-try( # run DoRothEA, confidence levels A, B and C
runDoRothEA(df, regulon=viper_regulon, confidence_level=c('A','B','C')),
silent = T
)
if(inherits(TF_genesymbol,"try-error")){ # If there is an error for some reason, skip the compound
next
}
TF_uniprot<-GeneSymbol2Uniprot(TF_genesymbol, map, 1, 2) # Map to UniProt
folder = paste0(i,"_measurements/") # Set folder name
generate_measfile(measurements=TF_uniprot, topnumber=50, write2folder=folder) # Write TF activities to folder
}
# Stop the cluster
stopCluster(myCluster)
# Load files for progeny
file.copy(from=system.file("model_NatComm+14_human.csv",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
weight_matrix<-read.csv("model_NatComm+14_human.csv")
View(weight_matrix)
# Import matrix
gexfile = "HT29_6h_10uM.csv"
# Import matrix
gexfile = "HT29_6h_10uM.csv"
gex_df = fread(gexfile,header=TRUE,sep=",") # First row is python header
gex_df = as.data.frame(gex_df) # As df
compound_names = names(gex_df) # Column names are compounds
compound_names = compound_names[!compound_names %in% 'Compound_id'] # Get rid of 'Compound_id'
i = compound_names[[1]]
print(i)
fname <- paste0("/",i, ".txt") # get signature .txt
fname <- paste0(i, ".txt") # get signature .txt
df = read.table(fname,sep="\t",header=TRUE,row.names=1) # Read back in file
df_genenames <- data.frame('gene'=rownames(df),df)
df_genenames
#Run progeny
pathway_scores <- try(
runPROGENy(df_genenames,weight_matrix,z_scores=F),
silent = T)
pathway_scores
#Generate input files
folder = paste0(i,"_measurements/scores_")
scores <- rbind(rownames(pathway_scores),pathway_scores[,1])
scores
write.table(scores,paste0(folder,i,".txt"),col.names=F,row.names=F,quote=F,sep='\t') # save
# Script to prepare PROGENy pathway scores
# Input: Matrix of gene expression data (Rows are genes (Entrez), columns are compounds), and
#        The .txt file for each signature (From prepare_input_parellel.R)
#         And a measurement folder for each compound (From prepare_input_parellel.R)
# Output: PROGEny pathway weights .txt in each compound's measurement folder
# Import packages
library(CARNIVAL)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(plyr)
library(data.table)
# set n to number of cores
myCluster <- makeCluster(n, type="FORK",outfile="")
registerDoParallel(myCluster)
# Load files for progeny
file.copy(from=system.file("model_NatComm+14_human.csv",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
weight_matrix<-read.csv("model_NatComm+14_human.csv")
# Import matrix
gexfile = "HT29_6h_10uM.csv"
gex_df = fread(gexfile,header=TRUE,sep=",") # First row is python header
gex_df = as.data.frame(gex_df) # As df
compound_names = names(gex_df) # Column names are compounds
compound_names = compound_names[!compound_names %in% 'Compound_id'] # Get rid of 'Compound_id'
# test for e.g. 10 compounds
compound_names = compound_names[1:10]
output <-
foreach(i = compound_names) %dopar% {  # loop over each compound
print(i)
fname <- paste0(i, ".txt") # get signature .txt
df = read.table(fname,sep="\t",header=TRUE,row.names=1) # Read back in file
df_genenames <- data.frame('gene'=rownames(df),df) # make df with rownames = gene symbols
#Run progeny
pathway_scores <- try(
runPROGENy(df_genenames,weight_matrix,z_scores=F),
silent = T)
if(inherits(pathway_scores,"try-error")){ # if it fails then skip
next
}
#Generate input files
folder = paste0(i,"_measurements/scores_") # get folder name
scores <- rbind(rownames(pathway_scores),pathway_scores[,1]) # put into correct format
write.table(scores,paste0(folder,i,".txt"),col.names=F,row.names=F,quote=F,sep='\t') # save
}
stopCluster(myCluster)
# Script to prepare PROGENy pathway scores
# Input: Matrix of gene expression data (Rows are genes (Entrez), columns are compounds), and
#        The .txt file for each signature (From prepare_input_parellel.R)
#         And a measurement folder for each compound (From prepare_input_parellel.R)
# Output: PROGEny pathway weights .txt in each compound's measurement folder
# Import packages
library(CARNIVAL)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(plyr)
library(data.table)
# set n to number of cores
myCluster <- makeCluster(n, type="FORK",outfile="")
registerDoParallel(myCluster)
# Load files for progeny
file.copy(from=system.file("model_NatComm+14_human.csv",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
weight_matrix<-read.csv("model_NatComm+14_human.csv")
# Import matrix
gexfile = "HT29_6h_10uM.csv"
gex_df = fread(gexfile,header=TRUE,sep=",") # First row is python header
gex_df = as.data.frame(gex_df) # As df
compound_names = names(gex_df) # Column names are compounds
compound_names = compound_names[!compound_names %in% 'Compound_id'] # Get rid of 'Compound_id'
# test for e.g. 10 compounds
compound_names = compound_names[1:10]
output <-
foreach(i = compound_names) %dopar% {  # loop over each compound
print(i)
fname <- paste0(i, ".txt") # get signature .txt
df = read.table(fname,sep="\t",header=TRUE,row.names=1) # Read back in file
df_genenames <- data.frame('gene'=rownames(df),df) # make df with rownames = gene symbols
#Run progeny
pathway_scores <- try(
runPROGENy(df_genenames,weight_matrix,z_scores=F),
silent = T)
if(inherits(pathway_scores,"try-error")){ # if it fails then skip
next
}
#Generate input files
folder = paste0(i,"_measurements/scores_") # get folder name
scores <- rbind(rownames(pathway_scores),pathway_scores[,1]) # put into correct format
write.table(scores,paste0(folder,i,".txt"),col.names=F,row.names=F,quote=F,sep='\t') # save
}
stopCluster(myCluster)
# Script to prepare PROGENy pathway scores
# Input: Matrix of gene expression data (Rows are genes (Entrez), columns are compounds), and
#        The .txt file for each signature (From prepare_input_parellel.R)
#         And a measurement folder for each compound (From prepare_input_parellel.R)
# Output: PROGEny pathway weights .txt in each compound's measurement folder
# Import packages
library(CARNIVAL)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(plyr)
library(data.table)
# set n to number of cores
n = 2
myCluster <- makeCluster(n, type="FORK",outfile="")
registerDoParallel(myCluster)
# Load files for progeny
file.copy(from=system.file("model_NatComm+14_human.csv",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
weight_matrix<-read.csv("model_NatComm+14_human.csv")
# Import matrix
gexfile = "HT29_6h_10uM.csv"
gex_df = fread(gexfile,header=TRUE,sep=",") # First row is python header
gex_df = as.data.frame(gex_df) # As df
compound_names = names(gex_df) # Column names are compounds
compound_names = compound_names[!compound_names %in% 'Compound_id'] # Get rid of 'Compound_id'
# test for e.g. 10 compounds
compound_names = compound_names[1:10]
output <-
foreach(i = compound_names) %dopar% {  # loop over each compound
print(i)
fname <- paste0(i, ".txt") # get signature .txt
df = read.table(fname,sep="\t",header=TRUE,row.names=1) # Read back in file
df_genenames <- data.frame('gene'=rownames(df),df) # make df with rownames = gene symbols
#Run progeny
pathway_scores <- try(
runPROGENy(df_genenames,weight_matrix,z_scores=F),
silent = T)
if(inherits(pathway_scores,"try-error")){ # if it fails then skip
next
}
#Generate input files
folder = paste0(i,"_measurements/scores_") # get folder name
scores <- rbind(rownames(pathway_scores),pathway_scores[,1]) # put into correct format
write.table(scores,paste0(folder,i,".txt"),col.names=F,row.names=F,quote=F,sep='\t') # save
}
stopCluster(myCluster)
# Create output dir
dir.create(file.path("RESULTS_CARNIVAL"),showWarnings = FALSE)
compound_folders = list.dirs(recursive=FALSE)
compound_dirs
compound_folders
# get ones that have already finished and exclude (checkpointing)
done_folders = list.dirs(path="RESULTS_CARNIVAL",full.names=FALSE,recursive=FALSE)
info = file.info(list.dirs(path="RESULTS_CARNIVAL",recursive=FALSE))
info = info[with(info, order(as.POSIXct(ctime))),]
donecomps = rownames(info)
exclude = tail(donecomps,n=1)
exclude = unlist(strsplit(exclude,"RESULTS_CARNIVAL/"))[2]
done_final = done_folders[!done_folders %in% exclude]
compound_folders
compound = compound_folders[1]
compound
drug = unlist(strsplit(unlist(strsplit(compound,"/"))[2],"_"))[1] # get the compound name
drug
#dir.create(file.path(paste0("RESULTS_CARNIVAL/",drug)),showWarnings = FALSE)
results_dir = paste0("RESULTS_CARNIVAL/",drug)
results_dir
#results_dir = "RESULTS_CARNIVAL/"
tf_activities = list.files(path=compound,pattern="_50.txt",full.names=TRUE)
progeny_pathways = list.files(path=compound,pattern="scores_",full.names=TRUE)
tf_activities
dir.create(file.path(paste0("RESULTS_CARNIVAL/",drug)),showWarnings = FALSE)
# load tf + progeny
tf_activities = list.files(path=compound,pattern="_50.txt",full.names=TRUE)
progeny_pathways = list.files(path=compound,pattern="scores_",full.names=TRUE)
progeny_pathways
R.version.string
?withProgress
library(readr)
library(piano)
library(dplyr)
library(ggplot2)
library(tibble)
library(tidyr)
library(dplyr)
library(scales)
library(plyr)
library(GSEABase)
library(network)
library(reshape2)
library(cowplot)
library(pheatmap)
library(ggraph)
library(tidygraph)
library(readr)
library(piano)
install.packages("piano")
BiocManager::install("piano")
library(piano)
library(dplyr)
library(ggplot2)
library(tibble)
library(tidyr)
library(dplyr)
library(scales)
library(plyr)
library(GSEABase)
library(network)
install.packages("nework")
install.packages("network")
library(network)
library(reshape2)
library(cowplot)
library(pheatmap)
library(ggraph)
library(tidygraph)
## We also load the support functions
source("support_enrichment.r")
source("support_networks.r")
setwd("~/OneDrive - University Of Cambridge/MoA_Tool/VizTest")
## We also load the support functions
source("support_enrichment.r")
source("support_networks.r")
# Read results
carnival_resut = readRDS("carnival_result.rds")
carnival_sample_resolution = readRDS("carnival_sample_resolution.rds")
# Read results
carnival_result = readRDS("carnival_result.rds")
View(carnival_sample_resolution)
pkn = read_tsv("omnipath_carnival.tsv")
# Load pathways
pathways = gmt_to_csv("c2.cp.v7.2.symbols.gmt")
# Extract nodes and bg
nodes_carnival = extractCARNIVALnodes(carnival_result)
# GSA
sig_pathways = runGSAhyper(genes=nodes_carnival$sucesses,
universe = nodes_carnival$bg,
gsc = loadGSC(pathways))
sig_pathways_df = as.data.frame(sig_pathways$resTab) %>%
tibble::rownames_to_column(var="pathway")
#data for plotting
PathwaysSelect <- sig_pathways_df %>%
dplyr::select(pathway, `p-value`, `Adjusted p-value`) %>%
dplyr::filter(`Adjusted p-value` <= 0.001) %>%
dplyr::rename(pvalue = `p-value`, AdjPvalu = `Adjusted p-value`) %>%
dplyr::mutate(pathway = as.factor(pathway))
PathwaysSelect <- data.frame(t(apply(PathwaysSelect, 1, function(r){
aux = unlist(strsplit( sub("_",";", r["pathway"]), ";" ))
r["pathway"] = gsub("_", " ", aux[2])
return(c(r, "source" = aux[1]))
})))
colnames(PathwaysSelect) = c("pathway", "pvalue", "AdjPvalu", "source")
PathwaysSelect$AdjPvalu = as.numeric(PathwaysSelect$AdjPvalu)
ggdata = PathwaysSelect %>%
dplyr::filter(AdjPvalu <= 0.05) %>%
dplyr::group_by(source) %>%
dplyr::arrange(AdjPvalu) %>%
dplyr::slice(1:5)
# Visualize top results
ggplot(ggdata, aes(y = reorder(pathway, AdjPvalu), x = -log10(AdjPvalu)), color = source) +
geom_bar(stat = "identity") +
facet_grid(source ~ ., scales="free_y") +
scale_x_continuous(
expand = c(0.01, 0.01),
limits = c(0, ceiling(max(-log10(PathwaysSelect$AdjPvalu)))),
breaks = seq(floor(min(-log10(PathwaysSelect$AdjPvalu))), ceiling(max(-log10(PathwaysSelect$AdjPvalu))), 1),
labels = math_format(10^-.x)
) +
annotation_logticks(sides = "bt") +
theme_bw() +
theme(axis.title = element_text(face = "bold", size = 12),
axis.text.y = element_text(size = 6)) +
ylab("")
carnival_visNet <- function(evis, nvis, mapIDs=NULL){
writeLines('Graphical representation of sample')
# color node scale red to blue
rb_scale = c("#F20404", "#EE0507", "#EA070B", "#E6090F", "#E20B12", "#DF0D16", "#DB0F1A",
"#D7101E", "#D31221", "#D01425", "#CC1629", "#C8182D", "#C41A30", "#C11B34",
"#BD1D38", "#B91F3C", "#B5213F", "#B22343", "#AE2547", "#AA264B", "#A6284E",
"#A32A52", "#9F2C56", "#9B2E5A", "#97305D", "#933261", "#903365", "#8C3569",
"#88376C", "#843970", "#813B74", "#7D3D78", "#793E7B", "#75407F", "#724283",
"#6E4487", "#6A468A", "#66488E", "#634992", "#5F4B96", "#5B4D99", "#574F9D",
"#5451A1", "#5053A5", "#4C55A8", "#4856AC", "#4458B0", "#415AB4", "#3D5CB7",
"#395EBB", "#3560BF", "#3261C3", "#2E63C6", "#2A65CA", "#2667CE", "#2369D2",
"#1F6BD5", "#1B6CD9", "#176EDD", "#1470E1", "#1072E4", "#0C74E8", "#0876EC", "#0578F0")
binned = cbind.data.frame(value=-100:100,bin = cut(-100:100, breaks = length(rb_scale), labels = as.character(1:64)))
# formating for visNetwork
## edges
colnames(evis) = c('from', "color", "to", "value")
evis$color[evis$color == 1] = '#0578F0' #blue
evis$color[evis$color == -1] = "#F20404" #red
evis$color[evis$color == 0] = '#777777' #gray
## legend for edges
ledges <- data.frame(color = c("#233f5c", "#f20404"),
label = c("activation", "inhibition"),
arrows = c("to", "to"),
font.align = "top")
## nodes
nvis = nvis[which(nvis$ZeroAct!=100),]
nvis$ZeroAct = NULL
nvis = nvis[which(nvis$Node%in%union(evis$from, evis$to)),]
if(!is.null(mapIDs)){
nvis = merge.data.frame(nvis, mapIDs[,c("uniprot_id", "hgnc_symbol")], by.x = "Node", by.y = "uniprot_id")
}else{
nvis$label = nvis$Node
}
colnames(nvis) = c("id", "UpAct", "DownAct", "color", "group", "label")
nvis$group = replace(nvis$group, nvis$group=='T', 'TFs')
nvis$group = replace(nvis$group, nvis$group=='S', 'Perturbed')
nvis$group = replace(nvis$group, nvis$group=='', 'Protein')
nvis$color = sapply(nvis$color, function(x,b,rb){rb[as.integer(as.character(b$bin[b$value==as.integer(x)]))]}, binned, rb_scale)
nvis$title = paste0("<p><b>", nvis$label,"</b><br>Up activity: ",nvis$UpAct,"</b><br>Down activity: ",nvis$DownAct,"</p>")
#nvis = rbind.data.frame(nvis, df)
nvis$level = rep(3, nrow(nvis))
aux = unique(evis$to[which(evis$from%in%unique(nvis$id[which(nvis$group=="Perturbed")]))])
nvis$level[which(nvis$id%in%aux)] = 2
aux = unique(evis$from[which(evis$to%in%unique(nvis$id[which(nvis$group=="TFs")]))])
nvis$level[which(nvis$id%in%aux)] = 4
nvis$level[which(nvis$group=="Perturbed")] = 1
nvis$level[which(nvis$group=="TFs")] = 5
nvis$level[which(nvis$group=="Pathway")] = 6
# Render network
vNet <- visNetwork(nvis, evis, height = '700px', width = "100%", main = NULL) %>%
visNodes(color = list(background="#F5F7FA", border="gray"),
font =  list(color="#23282a", size=30)) %>%
visEdges(length = 200, arrowStrikethrough = FALSE,
arrows = list(to = list(enabled = TRUE)),
font =  list(color="#23282a", size=30)) %>%
visGroups(groupname = "TFs", shape = "triangle", color = "#F5F7FA") %>%
visGroups(groupname = "Perturbed", shape = "square", color = "#F5F7FA") %>%
visGroups(groupname = "Protein", color = "#F5F7FA") %>%
visGroups(groupname = "Pathway",  shape = "box", color = "#F5F7FA") %>%
visPhysics(solver = "repulsion") %>%
visLayout(randomSeed = 9) %>%
visLegend(addEdges = ledges, useGroups = T) %>%
visHierarchicalLayout(levelSeparation = 500, #nodeSpacing = 500,
sortMethod = "directed",
edgeMinimization=F, blockShifting=F) %>%
visPhysics(hierarchicalRepulsion = list(nodeDistance = 300)) %>%
visOptions(manipulation = TRUE, collapse = TRUE)
return(vNet)
}
visNet = carnival_visNet(evis=carnival_result$weightedSIF,nvis=carnival_result$nodesAttributes)
install.packages("visNetwork")
install.packages("visNetwork")
library(visNetwork)
visNet = carnival_visNet(evis=carnival_result$weightedSIF,nvis=carnival_result$nodesAttributes)
View(visNet)
visSave(visNet, file = paste0('carnival_visualization_visNetwork.html'), selfcontained = TRUE)
View(PathwaysSelect)
View(sig_pathways_df)
View(sig_pathways)
sig_pathways$resTab
sig_pathways$contingencyTable

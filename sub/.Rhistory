df_genenames <- data.frame('gene'=rownames(df),df) # make df with rownames = gene symbols
#Run progeny
pathway_scores <- try(
runPROGENy(df_genenames,weight_matrix,z_scores=F),
silent = T)
if(inherits(pathway_scores,"try-error")){ # if it fails then skip
next
}
#Generate input files
folder = paste0(i,"_measurements/scores_") # get folder name
scores <- rbind(rownames(pathway_scores),pathway_scores[,1]) # put into correct format
write.table(scores,paste0(folder,i,".txt"),col.names=F,row.names=F,quote=F,sep='\t') # save
}
stopCluster(myCluster)
# Create output dir
dir.create(file.path("RESULTS_CARNIVAL"),showWarnings = FALSE)
compound_folders = list.dirs(recursive=FALSE)
compound_dirs
compound_folders
# get ones that have already finished and exclude (checkpointing)
done_folders = list.dirs(path="RESULTS_CARNIVAL",full.names=FALSE,recursive=FALSE)
info = file.info(list.dirs(path="RESULTS_CARNIVAL",recursive=FALSE))
info = info[with(info, order(as.POSIXct(ctime))),]
donecomps = rownames(info)
exclude = tail(donecomps,n=1)
exclude = unlist(strsplit(exclude,"RESULTS_CARNIVAL/"))[2]
done_final = done_folders[!done_folders %in% exclude]
compound_folders
compound = compound_folders[1]
compound
drug = unlist(strsplit(unlist(strsplit(compound,"/"))[2],"_"))[1] # get the compound name
drug
#dir.create(file.path(paste0("RESULTS_CARNIVAL/",drug)),showWarnings = FALSE)
results_dir = paste0("RESULTS_CARNIVAL/",drug)
results_dir
#results_dir = "RESULTS_CARNIVAL/"
tf_activities = list.files(path=compound,pattern="_50.txt",full.names=TRUE)
progeny_pathways = list.files(path=compound,pattern="scores_",full.names=TRUE)
tf_activities
dir.create(file.path(paste0("RESULTS_CARNIVAL/",drug)),showWarnings = FALSE)
# load tf + progeny
tf_activities = list.files(path=compound,pattern="_50.txt",full.names=TRUE)
progeny_pathways = list.files(path=compound,pattern="scores_",full.names=TRUE)
progeny_pathways
R.version.string
# Script to install packages required
install_required <- function(x){
for( i in x ){
#  require returns TRUE invisibly if it was able to load package
if( ! require( i , character.only = TRUE ) ){
#  If package was not able to be loaded then re-install
install.packages( i , dependencies = TRUE )
#  Load package after installing
require( i , character.only = TRUE )
}
}
}
install_required(c(shiny,shinyjs))
install_required(c("shiny","shinyjs"))
install_required(c("shiny","shinyjs","igraph","DT","miniUI","shinysky","shinyalert"))
runApp('OneDrive - University Of Cambridge/MoA_Tool')
setwd("~/OneDrive - University Of Cambridge/MoA_Tool")
load("~/OneDrive - University Of Cambridge/MoA_Tool/7April2021.RData")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
tf_activities_topn <<- tf_activities %>%
as.data.frame() %>%
rownames_to_column(var = "GeneID") %>%
{colnames(.)[2]="NES"; .} %>%
dplyr::top_n(as.numeric(input$no_tfs), wt = abs(NES)) %>%
dplyr::arrange(NES) %>%
dplyr::mutate(GeneID = factor(GeneID))
input$no_tfs <- 10
input = c()
input$no_tfs <- 10
tf_activities_topn <<- tf_activities %>%
as.data.frame() %>%
rownames_to_column(var = "GeneID") %>%
{colnames(.)[2]="NES"; .} %>%
dplyr::top_n(as.numeric(input$no_tfs), wt = abs(NES)) %>%
dplyr::arrange(NES) %>%
dplyr::mutate(GeneID = factor(GeneID))
View(tf_activities_topn)
# convert to uniprot
conversion = AnnotationDbi::select(org.Hs.eg.db,
as.character(tf_activities_topn$GeneID),
columns=c("SYMBOL","UNIPROT"),
ketype="SYMBOL")
# convert to uniprot
conversion = AnnotationDbi::select(org.Hs.eg.db,
as.character(tf_activities_topn$GeneID),
columns=c("SYMBOL","UNIPROT"),
ketype="SYMBOL")
tf_activities_topn$GeneID
# convert to uniprot
conversion = AnnotationDbi::select(org.Hs.eg.db,
as.character(tf_activities_topn$GeneID),
columns=c("SYMBOL","UNIPROT"),
ketype="SYMBOL")
# convert to uniprot
conversion = AnnotationDbi::select(org.Hs.eg.db,
as.character(tf_activities_topn$GeneID),
columns=c("SYMBOL","ENTREZID"),
ketype="SYMBOL")
# convert to uniprot
conversion = AnnotationDbi::select(org.Hs.eg.db,
as.character(tf_activities_topn$GeneID),
columns=c("SYMBOL","ENTREZID"),
keytype="SYMBOL")
# convert to uniprot
conversion = AnnotationDbi::select(org.Hs.eg.db,
as.character(tf_activities_topn$GeneID),
columns=c("SYMBOL","UNIPROT"),
keytype="SYMBOL")
View(conversion)
?distinct
conversion %>% distinct(SYMBOL,.keep_all=TRUE)
conversion_dedup = conversion %>% distinct(SYMBOL,.keep_all=TRUE)
merge(tf_activities_topn,conversion)
?merge
merge(tf_activities_topn,conversion_dedup,by.x="GeneID",by.y="SYMBOL",all=T)
tf_activities_topn = rbind(tf_activities_topn,data.frame("LOL","0.342"))
newnew = data.frame("LOL","2.43424")
newnew
names(newnew) = c("GeneID","NES")
tf_activities_topn = rbind(tf_activities_topn,newnew)
# convert to uniprot, keep only the first
conversion = AnnotationDbi::select(org.Hs.eg.db,
as.character(tf_activities_topn$GeneID),
columns=c("SYMBOL","UNIPROT"),
keytype="SYMBOL")
conversion_dedup = conversion %>% distinct(SYMBOL,.keep_all=TRUE)
# merge
tf_uniprot_merge = merge(tf_activities_topn,conversion_dedup,by.x="GeneID",by.y="SYMBOL",all=T)
View(tf_uniprot_merge)
tf_uniprot_merge$url <- paste0("https://www.uniprot.org/uniprot/",tf_uniprot_merge$UNIPROT)
# merge and create url col
tf_uniprot_merge = merge(tf_activities_topn,conversion_dedup,by.x="GeneID",by.y="SYMBOL",all=T)
tf_uniprot_merge$url <- paste0("https://www.uniprot.org/uniprot/",tf_uniprot_merge$UNIPROT)
tf_uniprot_merge$url <- paste0("<a href='",tf_uniprot_merge$url,"' target='_blank'>",tf_uniprot_merge$GeneID,"</a>")
tf_uniprot_merge$GeneID= ifelse(is.nan(tf_uniprot_merge$UNIPROT),tf_uniprot_merge$url,tf_uniprot_merge$GeneID)
# merge and create url col
tf_uniprot_merge = merge(tf_activities_topn,conversion_dedup,by.x="GeneID",by.y="SYMBOL",all=T)
tf_uniprot_merge$url <- paste0("https://www.uniprot.org/uniprot/",tf_uniprot_merge$UNIPROT)
tf_uniprot_merge$url <- paste0("<a href='",tf_uniprot_merge$url,"' target='_blank'>",tf_uniprot_merge$GeneID,"</a>")
is.nan(tf_uniprot_merge$UNIPROT)
is.na(tf_uniprot_merge$UNIPROT)
tf_uniprot_merge$GeneID= ifelse(is.na(tf_uniprot_merge$UNIPROT),tf_uniprot_merge$url,tf_uniprot_merge$GeneID)
# convert to uniprot, keep only the first
conversion = AnnotationDbi::select(org.Hs.eg.db,
as.character(tf_activities_topn$GeneID),
columns=c("SYMBOL","UNIPROT"),
keytype="SYMBOL")
conversion_dedup = conversion %>% distinct(SYMBOL,.keep_all=TRUE)
conversion_dedup$url <- paste0("https://www.uniprot.org/uniprot/",conversion_dedup$UNIPROT)
conversion_dedup$url <- paste0("<a href='",conversion_dedup$url,"' target='_blank'>",conversion_dedup$SYMBOL,"</a>")
View(conversion_dedup)
# merge and create url col
tf_uniprot_merge = merge(tf_activities_topn,conversion_dedup,by.x="GeneID",by.y="SYMBOL",all=T)
tf_uniprot_merge$TF= ifelse(is.na(tf_uniprot_merge$UNIPROT),tf_uniprot_merge$url,tf_uniprot_merge$GeneID)
tf_uniprot_merge$TF= ifelse(is.na(tf_uniprot_merge$UNIPROT)==T,tf_uniprot_merge$url,tf_uniprot_merge$GeneID)
tf_uniprot_merge$TF= ifelse(is.na(tf_uniprot_merge$UNIPROT)==T,tf_uniprot_merge$GeneID,tf_uniprot_merge$url)
tf_uniprot_merge$TF= ifelse(is.na(tf_uniprot_merge$UNIPROT)==T,as.character(tf_uniprot_merge$GeneID),tf_uniprot_merge$url)
tf_uniprot_merge[,c(5,2)]
# change table names and render
tf_activities_render = tf_uniprot_merge[,c(5,2)]
colnames(tf_activities_render) = c("TF (HGNC)","Normalised Enrichment Score (NES)")
View(tf_activities_render)
runApp()
runApp()
?arrange
# change table names and render
tf_activities_render = tf_uniprot_merge[,c(5,2)]
tf_activities_render = tf_activities_render%>%
dplyr::arrange(abs(NES))
View(tf_activities_render)
tf_activities_render$NES = as.numeric(as.character(tf_activities_render$NES))
tf_activities_render = tf_activities_render%>%
dplyr::arrange(abs(NES))
runApp()
runApp()
runApp()
View(tf_activities_topn)
View(tf_activities)
nrow(tf_activities)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
targets
all_nodes = unique(c(as.character(networkdf$source),as.character(networkdf$target)))
all_nodes
runApp()
targets
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
testthetargets
runApp()
testthetargets
runApp()
runApp()
log10(4)
## welcome page explaining each step (in progress, need to fill it in)
# warnings saying you have more than one compound will only use one
# batch upload tab (upload multiple CARNIVAL networks)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
datadf
datadf <<- datadf[,c(1,2)] # only keep first two cols
datadf
runApp()
runApp()
runApp()
runApp()
runApp()
library(rcdk)
img <- view.image.2d(parse.smiles("B([C@H](CC(C)C)NC(=O)[C@H](CC1=CC=CC=C1)NC(=O)C2=NC=CN=C2)(O)O")[[1]])
img
smiles <- c('CCC', 'CCN', 'CCN(C)(C)',
'c1ccccc1Cc1ccccc1',
'C1CCC1CC(CN(C)(C))CC(=O)CC')
mols <- parse.smiles(smiles)
view.molecule.2d(mols[[1]])
view.molecule.2d(mols)
rcdkplot = function(molecule,width=500,height=500) {
par(mar=c(0,0,0,0)) # set margins to zero since this isn't a real plot
temp1 = view.image.2d(molecule,width,height) # get Java representation into an image matrix. set number of pixels you want horiz and vertical
plot(NA,NA,xlim=c(1,10),ylim=c(1,10),xaxt='n',yaxt='n',xlab='',ylab='') # create an empty plot
rasterImage(temp1,1,1,10,10) # boundaries of raster: xmin, ymin, xmax, ymax. here i set them equal to plot boundaries
}
anle138b = parse.smiles("C1OC2=C(O1)C=C(C=C2)C3=CC(=NN3)C4=CC(=CC=C4)Br")[[1]]
rcdkplot(anle138b)
library(chemmineR)
BiocManager::install("ChemmineR")
library(ChemmineR)
sdf <- smiles2sdf("CC(=O)OC1=CC=CC=C1C(=O)O")
BiocManager::install("ChemmineOB")
sdf <- smiles2sdf("CC(=O)OC1=CC=CC=C1C(=O)O")
library(ChemmineOB)
library(chemdoodle)
chemdoodle_viewer("C1CCCCC1", width = 100, height = 100)
runApp()
test_smiles = "C1CCCCC1"
runApp()
smi_File
smi_file
smi <- read.csv(smi_file$datapath, header = F,sep="\t") # read the SMILES
alala = read.csv("Example_Data/DCLK1IN1.txt",sep="\t",header=F)
alala
alala[1,]
alala[1,1]
runApp()
?renderChemdoodle
runApp()
renderChemdoodle
chemdoodle_viewerOutput()
chemdoodle_viewerOutput
chemdoodle_viewerOutput(smi, width = 100, height = 100)
smi <- read.csv(smi_file$datapath, header = F,sep="\t")[1,1] # read the SMILES
chemdoodle_viewerOutput(smi, width = 100, height = 100)
smi <- "c1ccccc1"
chemdoodle_viewerOutput(smi, width = 100, height = 100)
runApp()
renderChemdoodle
runApp()
renderChemdoodle("c1ccccc1")
chemdoodle_viewerOutput(smi, width = 100, height = 100)
runApp()
runApp()
renderChemdoodle
renderChemdoodle("c1ccccc1")
renderChemdoodle(chemdoodleOutput="c1ccccc1")
renderChemdoodle(chemdoodle_viewer("c1ccccc1"))
chemdoodle_viewerOutput("smi")
chemdoodle_viewer("smi")
chemdoodle_viewer("c")
chemdoodle_viewer("ccc")
chemdoodle_viewer("ccc1")
chemdoodle_viewer("CC")
runApp()
runApp()
runApp()
output$chemsmi <- renderChemdoodle("CC")
output$chemsmi <- renderChemdoodle(chemdoodle_viewer("CC"))
output$chemsmi <- renderChemdoodle(chemdoodleOutput=chemdoodle_viewer("CC"))
chemdoodleOutput = chemdoodle_viewer("CC")
output$chemsmi <- renderChemdoodle()
?substitute
substitute("poo")
renderChemdoodle
?shinyRenderWidget
output$chemsmi <- shinyRenderWidget(chemdoodle_viewer("CC"))
library(htmlwidgets)
output$chemsmi <- shinyRenderWidget(chemdoodle_viewer("CC"))
chemdoodleOutput = chemdoodle_viewer("CC")
output$chemsmi <- shinyRenderWidget(chemdoodle_viewer("CC"))
output$chemsmi <- shinyRenderWidget(chemdoodle_viewer("CC"),quoted=F)
output$chemsmi <- shinyRenderWidget(chemdoodle_viewer("CC"),quoted=F,env=parent.frame())
output$chemsmi <- renderChemdoodle(chemdoodleOutput)
renderChemdoodle
runApp('test_smi_render')
runApp('test_smi_render')
runApp('test_smi_render')
runApp('test_smi_render')
runApp('test_smi_render')
runApp('test_smi_render')
runApp('test_smi_render')
chemdoodle_viewerOutput()
chemdoodle_viewerOutput
runApp('test_smi_render')
runApp('test_smi_render')
renderChemdoodle()
renderChemdoodle
runApp('test_smi_render')
runApp()
runApp('test_smi_render')
renderChemdoodle
runApp('test_smi_render')
chemdoodle_viewer("c1ccccc1")
runApp('test_smi_render')
renderChemdoodle()
renderChemdoodle
runApp('test_smi_render')
chemdoodle_viewer
runApp('test_smi_render')
shiny::runApp('test_smi_render')
renderChemdoodle
runApp('test_smi_render')
runApp('test_smi_render')
?chemdoodle_viewerOutput
renderChemdoodle
renderChemdoodle_viewer = function (expr, env = parent.frame(), quoted = FALSE)
{
if (!quoted) {
expr <- substitute(expr)
}
shinyRenderWidget(expr, chemdoodle_viewerOutput, env, quoted = TRUE)
}
runApp('test_smi_render')
runApp('test_smi_render')
View(renderChemdoodle_viewer)
View(renderChemdoodle_viewer)
library(rcdk)
smiles <- c('CCC', 'CCN', 'CCN(C)(C)',
'c1ccccc1Cc1ccccc1',
'C1CCC1CC(CN(C)(C))CC(=O)CC')
mols <- parse.smiles(smiles)
mols
img <- view.image.2d(parse.smiles("B([C@H](CC(C)C)NC(=O)[C@H](CC1=CC=CC=C1)NC(=O)C2=NC=CN=C2)(O)O")[[1]])
img
rasterImage(img)
rasterImage(img,1,6 5,10)
copy.image.to.clipboard(img)
smiles <- c('CCC', 'CCN', 'CCN(C)(C)','c1ccccc1Cc1ccccc1')
mols <- parse.smiles(smiles)
dframe <- data.frame(x = runif(4),
toxicity = factor(c('Toxic', 'Toxic', 'Nontoxic', 'Nontoxic')),
solubility = c('yes', 'yes', 'no', 'yes'))
view.table(mols, dframe)
View(dframe)
view.molecule.2d(mols[[1]])
mol <- parse.smiles(smile)[[1]]
smile <- 'c1ccccc1CC(=O)C(N)CC1CCCCOC1'
mol <- parse.smiles(smile)[[1]]
smile <- "TEST"
mol <- parse.smiles(smile)[[1]]
tt <- tryCatch(
mol <- parse.smiles(smile)[[1]],
error = function(e) e, warning=function(w)
)
tt <- tryCatch(
mol <- parse.smiles(smile)[[1]],
error = function(e) e, warning=function(w))
tt <- tryCatch(
parse.smiles(smile)[[1]],
error = function(e) e, warning=function(w))
tt <- tryCatch(
parse.smiles(smile)[[1]],
error = function(e) e, warning=function(w))
tt <- tryCatch(
parse.smiles(smile)[[1]], error = function(e) e, warning=function(w) w
)
tt
if(is(tt,"warning")) print ("KOOKOO")
mol_check <- tryCatch(
parse.smiles(smi)[[1]], error = function(e) e, warning = function(w) w)
mol_check <- tryCatch(
parse.smiles(smi)[[1]], error = function(e) e, warning = function(w) w)
mol_check <- tryCatch(
parse.smiles(smi)[[1]], error = function(e) e, warning = function(w) w)
mol_check <- tryCatch(
parse.smiles(smi)[[1]], error = function(e) e, warning = function(w) w)
mol_check <- tryCatch(
parse.smiles(smi)[[1]], error = function(e) e, warning = function(w) w)
if(is(mol_check,"warning")) print ("KOOKOO")
smi = 'c1ccccc1CC(=O)C(N)CC1CCCCOC1'
mol_check <- tryCatch(
parse.smiles(smi)[[1]], error = function(e) e, warning = function(w) w)
if(is(mol_check,"warning")) print ("KOOKOO")
smi = "TEST"
mol_check <- tryCatch(
parse.smiles(smi)[[1]], error = function(e) e, warning = function(w) w)
if(is(mol_check,"warning")) print ("KOOKOO")
setwd("~/OneDrive - University Of Cambridge/MoA_Tool/sub")
load("~/OneDrive - University Of Cambridge/MoA_Tool/7April2021.RData")
runApp('~/OneDrive - University Of Cambridge/MoA_Tool')
runApp('~/OneDrive - University Of Cambridge/MoA_Tool')
?Req
?req
runApp('~/OneDrive - University Of Cambridge/MoA_Tool')
if(exists("pidginAd")) print("HELLO")
runApp('~/OneDrive - University Of Cambridge/MoA_Tool')
exists(datadf)
runApp('~/OneDrive - University Of Cambridge/MoA_Tool')
runApp('~/OneDrive - University Of Cambridge/MoA_Tool')
runApp('~/OneDrive - University Of Cambridge/MoA_Tool')
?read.csv
networkdf
networkdf = read.csv("../Example_Data/metabase_all.sif",sep="\t",header=T)
head(networkdf)
networkdf$interaction
type(networkdf$interaction)
typeof(networkdf$target)
apply(networkdf, 1, function(r) any(r %in% c("-1", "1")))
View(networkdf)
networkdf %>% filter_at(vars(interaction), any_vars(. %in% c('1', '-1')))
# Check that middle col has -1 or 1
correct_vals = networkdf %>% filter_at(vars(interaction), any_vars(. %in% c('1', '-1')))
View(dorothea_hs)
nrow(correct_vals) = nrow(networkdf)
nrow(correct_vals) == nrow(networkdf)
runApp('~/OneDrive - University Of Cambridge/MoA_Tool')
?filter_at
# Filter interaction col for only -1 and 1 vals
correct_vals = networkdf %>% filter_at(vars(2), any_vars(. %in% c('1', '-1')))
correct_vals
runApp('~/OneDrive - University Of Cambridge/MoA_Tool')
runApp('~/OneDrive - University Of Cambridge/MoA_Tool')
runApp('~/OneDrive - University Of Cambridge/MoA_Tool')
networkdf
ncol(networkdf)
if(ncol(networkdf==3)){
# Filter interaction col for only -1 and 1 vals
correct_vals = networkdf %>% filter_at(vars(2), any_vars(. %in% c('1', '-1')))
if(nrow(correct_vals) != nrow(networkdf)){
paste0("ERROR: It appears that your network is not in the correct format. Please check the documentation or the help button, and make sure your file is correctly formatted.")
}else{
# If correct, we continue
# Here, it gets converted to an igraph form, so if it doesnt work despite the checks we can throw up an error
g = try(igraph::graph_from_data_frame(networkdf))
if(inherits(g,"try-error")){
paste0("Error with network upload. Please check the documentation or the help button, and make sure your file is correctly formatted.")
}else{
nodecount = igraph::gorder(g)
edgecount = igraph::gsize(g)
paste0("Network upload complete. ",
"Number of Nodes: ",round(nodecount,0),'  |  ',
"Number of Edges: ",round(edgecount,0))
}
}
}
ncol(networkdf)==3
runApp('~/OneDrive - University Of Cambridge/MoA_Tool')
# Check 3 cols
if(ncol(networkdf)!=3){
paste0("ERROR: It appears that your network is not in the correct format. Please check the documentation or the help button, and make sure your file is correctly formatted.")
}
if(ncol(networkdf)==3){
# Filter interaction col for only -1 and 1 vals
correct_vals = networkdf %>% filter_at(vars(2), any_vars(. %in% c('1', '-1')))
if(nrow(correct_vals) != nrow(networkdf)){
paste0("ERROR: It appears that your network is not in the correct format. Please check the documentation or the help button, and make sure your file is correctly formatted.")
}else{
# If correct, we continue
# Here, it gets converted to an igraph form, so if it doesnt work despite the checks we can throw up an error
g = try(igraph::graph_from_data_frame(networkdf))
if(inherits(g,"try-error")){
paste0("Error with network upload. Please check the documentation or the help button, and make sure your file is correctly formatted.")
}else{
nodecount = igraph::gorder(g)
edgecount = igraph::gsize(g)
paste0("Network upload complete. ",
"Number of Nodes: ",round(nodecount,0),'  |  ',
"Number of Edges: ",round(edgecount,0))
}
}
}
runApp('~/OneDrive - University Of Cambridge/MoA_Tool')
runApp('~/OneDrive - University Of Cambridge/MoA_Tool')
runApp('~/OneDrive - University Of Cambridge/MoA_Tool')
runApp('~/OneDrive - University Of Cambridge/MoA_Tool')
runApp('~/OneDrive - University Of Cambridge/MoA_Tool')
